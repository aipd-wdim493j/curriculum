{
  "name": "bean",
  "description": "an events api for javascript",
  "version": "0.4.11-1",
  "homepage": "https://github.com/fat/bean",
  "authors": [
    "Jacob Thornton <@fat>",
    "Dustin Diaz <@ded>",
    "Rod Vagg <@rvagg>"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/fat/bean.git"
  },
  "keywords": [
    "ender",
    "events",
    "event"
  ],
  "main": "./bean.js",
  "ender": "./src/ender.js",
  "readme": "Bean\n----\nBean is a small, slick, cross-platform, framework-agnostic event utility designed for desktop, mobile, and touch-based browsers. In its simplest form - it works like this:\n\n```javascript\nbean.add(element, 'click', function (e) {\n  console.log('hello');\n});\n```\n\nAPI\n---\nBean has five methods, each packing quite a punch.\n\n  * bean.<code>add()</code>\n  * bean.<code>one()</code>\n  * bean.<code>remove()</code>\n  * bean.<code>clone()</code>\n  * bean.<code>fire()</code>\n\nadd()\n---\n<code>bean.add()</code> lets you attach event listeners to both elements and objects.\n\n<h3>Signature</h3>\n\n  * {1} element {DOM Element} an HTML DOM element\n  * {2} event type(s) {String} an event (or multiple events) to listen to\n  * {3} handler {Function} the callback function\n\n  * {2,3} handlers {Object} a list of event keys with callback functions as the values\n\n  * {4,n} optional args\n\n<h3>Examples</h3>\n\n```javascript\n// simple\nbean.add(element, 'click', handler);\n\n// optional arguments passed to handler\nbean.add(element, 'click', function(e, o1, o2) {\n  console.log(o1, o2);\n}, 'fat', 'ded');\n\n// multiple events\nbean.add(element, 'keydown keyup', handler);\n\n// multiple handlers\nbean.add(element, {\n  click: function (e) {},\n  mouseover: function (e) {},\n  'focus blur': function (e) {}\n});\n\n// event delegated events\nbean.add(element, '.content p', 'click', handler);\n```\n\n**Note**: the 5th parameter (selector engine) of previous Bean releases is now deprecated and will be removed in future versions. Use `setSelectorEngine()` instead.\n\nOr alternatively, you can pass an array of elements (this actually cuts down on selector engine work, and is a more performant means of delegation if you know your DOM won't be changing:\n\n```javascript\nbean.add(element, [el, el2, el3], 'click', handler);\n//or\nbean.add(element, $('.myClass'), 'click', handler);\n```\n\n*(note: the focus, blur, and submit events will not delegate)*\n\n<h3>Namespacing</h3>\nBean also now supports namespacing your events! This makes it much easier to target them down the line with things like remove or fire. To name space an event just add a dot followed by your unique name identifier:\n\n```javascript\nbean.add(element, 'click.fat', fn);\nbean.add(element, 'click.ded', fn);\nbean.add(element, 'click', fn);\n\n//later...\nbean.fire(element, 'click.ded');\nbean.remove(element, 'click.fat');\n\n//alternatively you can specify mutliple remove or fire handlers at once\nbean.fire(element, 'click.ded.fat');\nbean.remove(element, 'click.fat.ded');\n```\n\none()\n---\n<code>bean.one()</code> is an alias for <code>bean.add()</code> except that the handler will only be executed once and then removed for the event type(s).\n\nremove()\n------\n<code>bean.remove()</code> is how you get rid of listeners once you no longer want them. It's also a good idea to call remove on elements before you remove elements from your dom (this gives Bean a chance to clean up some things and prevents memory leaks)\n\n```javascript\n// remove a single event handlers\nbean.remove(element, 'click', handler);\n\n// remove all click handlers\nbean.remove(element, 'click');\n\n// remove handler for all events\nbean.remove(element, handler);\n\n// remove multiple events\nbean.remove(element, 'mousedown mouseup');\n\n// remove all events\nbean.remove(element);\n\n// remove handlers for events using object literal\nbean.remove(element, { click: clickHandler, keyup: keyupHandler })\n```\n\nclone()\n-----\n<code>bean.clone()</code> is a method for cloning events from one element to another.\n\n```javascript\n// clone all events at once by doing this:\nbean.clone(toElement, fromElement);\n\n// clone events of a specific type\nbean.clone(toElement, fromElement, 'click');\n```\n\nfire()\n----\n<code>bean.fire()</code> gives you the ability to trigger events.\n\n```javascript\n// fire a single event on an element\nbean.fire(element, 'click');\n\n// fire multiple types\nbean.fire(element, 'mousedown mouseup');\n```\n\nsetSelectorEngine()\n----\n<code>bean.setSelectorEngine()</code> allows you to set a default selector engine for all your delegation needs.\n\n```javascript\nbean.setSelectorEngine(qwery);\n```\n\n**Note**: `querySelectorAll()` is used as the default selector engine, this is available on most modern platforms such as mobile WebKit. To support event delegation on older browsers you will need to install a selector engine.\n\nCustom events\n-------------\nBean uses methods similar to [Dean Edwards' event model](http://dean.edwards.name/weblog/2009/03/callbacks-vs-events/) to ensure custom events behave like real events, rather than just callbacks.\n\nFor all intents and purposes, you can just think of them as native events, which will bubble up, and everything else you would expect...\n\nuse them like this:\n\n```javascript\nbean.add(element, 'partytime', handler);\nbean.fire(element, 'partytime');\n```\n\nmouseenter, mouseleave\n----------------------\nBean provides you with two custom DOM events, <code>mouseenter</code> and <code>mouseleave</code>. They are essentially just helpers for making your mouseover/mouseout lives a bit easier.\n\nuse them like regular events:\n\n    bean.add(element, 'mouseenter', handler);\n\nObject support\n--------------\nGood news, everything you can do in Bean with an element, you can also do with an object! This is particularly useful for working with classes or plugins.\n\n```javascript\nvar inst = new Klass();\nbean.add(inst, 'complete', handler);\n\n//later on...\nbean.fire(inst, 'complete');\n```\n\nBrowser Support\n---------------\nBean passes our tests in all the following browsers. If you've found bugs in these browsers or others please let us know!\n\n  - IE6, IE7, IE8, IE9\n  - Chrome 1-10\n  - Safari 4-5\n  - Firefox 3, 4\n\nOther important browser notes\n--------------\nOne of the great things about Bean is that it fixes a number of distinguishable browser differences and also provides proper cross-platform support for certain special events.\n\n```javascript\n// normalized browser event model for default behavior and propagation\nbean.add(el, 'click', function (e) {\n  e.preventDefault();\n  e.stopPropagation();\n});\n\n// a simple shortcut, since you usually want preventDefault() and stopPropagation() at the same time\n// (works the same as the previous example)\nbean.add(el, 'click', function (e) {\n  e.stop();\n});\n\n// DOMContentLoaded\nbean.add(document, 'DOMContentLoaded', fn);\n\n// mousewheel\nbean.add(el, 'mousewheel', fn);\n\n// mobile\nbean.add(window, 'orientationchange', fn);\n\n// touch events\nbean.add(el, 'touchstart touchmove touchend touchcancel', fn);\n\n// gestures\nbean.add(el, 'gesturestart gesturechange gestureend', fn);\n```\n\nBuilding Bean\n-------------\nBean uses [JSHint](http://www.jshint.com/) to keep some house rules as well as [UglifyJS](https://github.com/mishoo/UglifyJS) for its compression. For those interested in building Bean yourself. Run *make* in the root of the project.\n\nTests\n-----\npoint your browser at <code>bean/tests/index.html</code>\n\nEnder Integration API\n---------------------\n\nIf you use Bean with Ender its API is greatly extended through its bridge file. This extension aims to give Bean the look and feel of jQuery, but at the tiny size of Bean.\n\nHere's the run down of the method alias' added...\n\n**ADD EVENTS**\n\n + on - <code>$(element).on('click', fn);</code> *NOTE: This API is likely to change slightly in the near future see [#55](https://github.com/fat/bean/issues/55)*\n + addListener - <code>$(element).addListener('click', fn);</code>\n + bind - <code>$(element).bind('click', fn);</code>\n + listen - <code>$(element).listen('click', fn);</code>\n\n\n**REMOVE EVENTS**\n\n + unbind - <code>$(element).unbind('click');</code>\n + unlisten - <code>$(element).unlisten('click');</code>\n + removeListener - <code>$(element).removeListener('click');</code>\n\n\n**DELEGATE EVENTS**\n\n + delegate - <code>$(element).delegate('.foo', 'click', fn);</code>\n + undelegate - <code>$(element).undelegate('.foo', 'click');</code>\n\n\n**CLONE EVENTS**\n\n + cloneEvents - <code>$(element).cloneEvents('.foo', fn);</code>\n\n\n**CUSTOM EVENTS**\n\n + fire / emit / trigger - <code>$(element).trigger('click')\n\n**SPECIAL EVENTS**\n\n + hover - <code>$(element).hover(enterfn, leavefn);</code>\n + blur - <code>$(element).blur(fn);</code>\n + change - <code>$(element).change(fn);</code>\n + click - <code>$(element).click(fn);</code>\n + dblclick - <code>$(element).dblclick(fn);</code>\n + focusin - <code>$(element).focusin(fn);</code>\n + focusout - <code>$(element).focusout(fn);</code>\n + keydown - <code>$(element).keydown(fn);</code>\n + keypress - <code>$(element).keypress(fn);</code>\n + keyup - <code>$(element).keyup(fn);</code>\n + mousedown - <code>$(element).mousedown(fn);</code>\n + mouseenter - <code>$(element).mouseenter(fn);</code>\n + mouseleave - <code>$(element).mouseleave(fn);</code>\n + mouseout - <code>$(element).mouseout(fn);</code>\n + mouseover - <code>$(element).mouseover(fn);</code>\n + mouseup - <code>$(element).mouseup(fn);</code>\n + mousemove - <code>$(element).mousemove(fn);</code>\n + resize - <code>$(element).resize(fn);</code>\n + scroll - <code>$(element).scroll(fn);</code>\n + select - <code>$(element).select(fn);</code>\n + submit - <code>$(element).submit(fn);</code>\n + unload - <code>$(element).unload(fn);</code>\n\nContributors\n-------\n\n  * [Dustin Diaz](https://github.com/fat/bean/commits/master?author=ded)\n  * [Jacob Thornton](https://github.com/fat/bean/commits/master?author=fat)\n  * Follow our software [@dedfat](http://twitter.com/dedfat)\n",
  "_id": "bean@0.4.11-1",
  "dist": {
    "shasum": "559054128408ef513547d8afc984c25da58b2b1c"
  },
  "_from": "bean@*"
}
